set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'file:///home/the_path_to/vim-plugins/DrawIt'
Plugin 'file:///home/the_path_to/vim-plugins/nerdtree'
Plugin 'file:///home/the_path_to/vim-plugins/rainbow'
Plugin 'file:///home/the_path_to/vim-plugins/vim-airline'
Plugin 'file:///home/the_path_to/vim-plugins/vim-airline-themes'
Plugin 'file:///home/the_path_to/vim-plugins/vim-colorschemes'
Plugin 'file:///home/the_path_to/vim-plugins/vim-cpp-modern'
Plugin 'file:///home/the_path_to/vim-plugins/vim-clang-format'
Plugin 'file:///home/the_path_to/vim-plugins/vim-fold-cycle'
Plugin 'file:///home/the_path_to/vim-plugins/tagbar'
Plugin 'file:///home/the_path_to/vim-plugins/lh-vim-lib'
Plugin 'file:///home/the_path_to/vim-plugins/VimFold4C'
Plugin 'file:///home/the_path_to/vim-plugins/YouCompleteMe'
Plugin 'file:///home/the_path_to/vim-plugins/vim-cpp-enhanced-highlight'
Plugin 'file:///home/the_path_to/vim-plugins/vim-win'
Plugin 'file:///home/the_path_to/vim-plugins/vim-translator'
call vundle#end()            " required
filetype plugin indent on    " required
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


set mouse=
set nu
set tabstop=2
set shiftwidth=2
set ts=2
set softtabstop=2
set expandtab
set autoindent
set tags=tags

syntax enable
set hlsearch

set t_Co=256
set background=dark
set backspace=2

autocmd BufReadPost * if line("'\"") && line("'\"") <= line("$") | exe "normal `\"" | endif
set cursorline
set encoding=utf-8

let g:airline_powerline_fonts = 1  "支持 powerline 字体
let g:airline#extensions#tabline#enabled = 1 "显示窗口tab和buffer

" NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" trim whitespaces
autocmd BufWritePre * %s/\s\+$//e

map <C-n> :NERDTreeToggle<CR>
map <C-w> :Win()<CR>

colorscheme monoacc
let g:cpp_simple_highlight = 1
let g:rainbow_active = 1

" any fold
"autocmd Filetype * AnyFoldActivate
"set foldlevel=99
"hi Folded term=underline
" activate anyfold by default
"augroup anyfold
"    autocmd!
"    autocmd Filetype <filetype> AnyFoldActivate
"augroup END

" disable anyfold for large files
"let g:LargeFile = 1000000 " file is large if size greater than 1MB
"autocmd BufReadPre,BufRead * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
"function LargeFile()
"    augroup anyfold
"        autocmd! " remove AnyFoldActivate
"        autocmd Filetype <filetype> setlocal foldmethod=indent " fall back to indent folding
"    augroup END
"endfunction
let g:fold_options = {
   \ 'fallback_method' : { 'line_threshold' : 2000, 'method' : 'syntax' },
   \ 'fold_blank': 0,
   \ 'fold_includes': 0,
   \ 'max_foldline_length': 'win',
   \ 'merge_comments' : 1,
   \ 'show_if_and_else': 1,
   \ 'strip_namespaces': 1,
   \ 'strip_template_arguments': 1
   \ }
set foldlevel=99

let g:fold_cycle_default_mapping = 0 "disable default mappings
nmap <Tab><Tab> <Plug>(fold-cycle-open)
nmap WW <Plug>(fold-cycle-close)

" tag bar shortcut
let g:tagbar_left = 1
nmap <C-m> :TagbarToggle<CR>

source /home/the_path_to/workspace/vim-settings/setcolor.vim
source /home/the_path_to/workspace/vim-settings/highlights.vim


" YouCompleteMe
let g:ycm_show_diagnostics_ui = 0
let g:ycm_confirm_extra_conf = 0
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0

" vim-cpp-enhanced-highlight
let g:cpp_class_scope_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_template_highlight = 1  "a faster highlight for cpp template implementation but has some corner cases where it doesn't work.
let g:cpp_concepts_highlight = 1

" clang
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "Standard" : "c++14"}

" translator
nmap tt :Translate<CR>
